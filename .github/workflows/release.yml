name: Build (JBR) & Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag (e.g., v2.1.12)'
        required: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java (JetBrains Runtime 21)
        uses: actions/setup-java@v4
        with:
          distribution: 'jetbrains'
          java-version: '21'
          cache: 'gradle'

      - name: Choose output path in workspace
        shell: bash
        run: |
          echo "OUTPUT_DIR=${GITHUB_WORKSPACE}/out" >> $GITHUB_ENV
          echo "Using OUTPUT_DIR=$OUTPUT_DIR"

      - name: Build (snapshot=false) to OUTPUT_DIR
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -PoutputPath="$OUTPUT_DIR" -Pversion.snapshot=false

      - name: List outputs
        run: |
          echo "== Core outputs =="
          ls -la "$OUTPUT_DIR" || true
          echo "== Plugin outputs =="
          ls -la "$OUTPUT_DIR/plugins" || true

      - name: Stage artifacts with prefixes
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist/plugins

          shopt -s nullglob
          # Core: OUTPUT_DIR/*.jar -> dist/Core-<basename>
          for f in "$OUTPUT_DIR"/*.jar; do
            base="$(basename "$f")"
            cp "$f" "dist/Core-${base}"
          done

          # Plugins: OUTPUT_DIR/plugins/*.jar -> dist/plugins/Plugin-<basename>
          if [[ -d "$OUTPUT_DIR/plugins" ]]; then
            for f in "$OUTPUT_DIR"/plugins/*.jar; do
              base="$(basename "$f")"
              cp "$f" "dist/plugins/Plugin-${base}"
            done
          fi

          echo "== Staged for release =="
          ls -la dist || true
          ls -la dist/plugins || true

      - name: Create BotPack zip (original names)
        shell: bash
        run: |
          set -e
          mkdir -p dist
          tag="${GITHUB_REF##*/}"; [[ -n "$tag" ]] || tag="${{ github.event.inputs.tag_name || 'manual' }}"
          (cd "$OUTPUT_DIR" && zip -r "../dist/BotPack-${tag}.zip" .)
          ls -la dist

      - name: Upload CI artifacts (optional)
        uses: actions/upload-artifact@v4
        with:
          name: build-outputs
          path: |
            dist/*.jar
            dist/plugins/*.jar
            dist/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download staged artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-outputs
          path: dist

      - name: Determine tag
        id: tag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          fi
          echo "Using tag: ${{ steps.tag.outputs.tag }}"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag.outputs.tag }}
          name: ${{ steps.tag.outputs.tag }}
          artifacts: |
            dist/Core-*.jar
            dist/plugins/Plugin-*.jar
            dist/BotPack-*.zip
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
